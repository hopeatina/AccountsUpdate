using System;
using System.Collections.Generic;
using System.Linq;
using Box.V2; 
using System.Text;
using System.Threading.Tasks;
using Box.V2.Config;
using Box.V2.Auth;
using Nito.AsyncEx;
using Box.V2.Models;
using Box.V2.Exceptions;
using System.ComponentModel;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            const string CLIENT_ID = "ay450o57uod43241xuu7krbaqpmizzsh";
            const string CLIENT_SECRET = "b8OQcifI9F7MV9aYSCBIa0XlgUHX0uhl";
            const string DEV_ACCESS_TOKEN = "jMSWJwcMGsJdjNk3WE3YrdhNTw67zdMr"; // refresh from https://mdaccdev.app.box.com/developers/services/edit/134958
            const string REFRESH_TOKEN = "helloworld";
            Console.WriteLine("Beginning");
            try
            {
                var config = new BoxConfig(CLIENT_ID, CLIENT_SECRET, new Uri("http://localhost"));
                var session = new OAuthSession(DEV_ACCESS_TOKEN, REFRESH_TOKEN, 3600, "bearer");
                var client = new BoxClient(config, session);

                AsyncContext.Run(() => MainAsync(client));
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                //Console.WriteLine(ex.InnerException);
                //Console.WriteLine(ex.Message);
               Console.WriteLine(ex.TargetSite);
            }

            Console.WriteLine();
            Console.Write("Press return to exit...");
            Console.ReadLine();

        }

        static async Task MainAsync(BoxClient client)
        {
            
                var request = new BoxUserRequest();
                request.Id = "221744691"; 

                string[] numbers = new string[5];
            numbers[1] = "1234567";
            request.TrackingCodes = numbers;
            //Console.WriteLine(request.TrackingCodes.GetValue(1));
            var trackcodes = new List<string> { null };

            BoxUser user = await client.UsersManager.UpdateUserInformationAsync(request, trackcodes);
            foreach (var prop in user.GetType().GetProperties())
            {
                Console.WriteLine("{0}={1}", prop.Name, prop.GetValue(user, null));
            }
            //foreach (var code in user.TrackingCodes)
            //{
            //    Console.WriteLine(code);
            //}

            Console.WriteLine("SPACEEEEEEEEE JAAAAMMMMM");

            BoxUser user2 = await client.UsersManager.GetCurrentUserInformationAsync(null);
            foreach (var prop in user2.GetType().GetProperties())
            {
                Console.WriteLine("{0}={1}", prop.Name, prop.GetValue(user2, null));
            }
            

                //fields.ForEach(i => Console.Write("{0}\t", i));
            

                //user2.Name = "JAMES MCJOHN";
                //user2.Phone = "7154848651";
                //user2.Enterprise =null;
              
                
                int beg = 500;
                var limit = (uint)(int)beg;
                var offset = limit - 500; 

                   //var listofusers = await client.UsersManager.GetEnterpriseUsersAsync();

                //Console.WriteLine("");
                //foreach (var prop in user3.GetType().GetProperties())
                //{
                //    Console.WriteLine("{0}={1}", prop.Name, prop.GetValue(user2, null));
                //}
                Console.WriteLine("");
                //foreach (var prop in listofusers.GetType().GetProperties())
                //{
                //    Console.WriteLine("{0}={1}", prop.Name, prop.GetValue(user2, null));
                //}

                //await LoadFolder(root);
        }

    }
}
